- 세미콜론이 안붙는 경우
                1. 선언적함수(이름이 있는 함수)의 끝
                2. 제어문의 끝(if문, for문,...)



- [ JS에서 따옴표의 의미 ]
            - 값을 의미! (string:문자데이터)
            - 문자를 따옴표로 안싸면 그것은 변수라고 함!


- [ JS에서 요소 선택 후 CSS변경하기 ]
            - 선택요소.style.스타일시트속성명 = 속성값
	- JS에서 CSS를 변경하면 요소 태그 내부에
            - style속성으로 인라인코딩 되어 들어간다!
                (최우선 적용!)

- [ JS에서 코드를 재사용하는 방법 ]
            - 선택요소를 변수에 넣기!
            - 변수는 어떤 값이나 객체를 저장하는 공간
            - 변수명은 그 저장된 공간의 주소명이다!
            - 변수 사용법:
                var 변수명 = 값
                ->>>> 변수는 따옴표로 싸지 않은 문자다!!!

            [ JS의 변수명 / 함수명 작명시 유의사항 ]
            - 문자를 따옴표로 싸지 않고 숫자로 시작하지도 않으며
            띄어쓰지 않고 대소문자를 철처히 구분하여 이름을 짓는다!(특수문자안됨!)

         

- [ JS에서 요소 선택후 html 넣기 ]
            선택요소.innerHTML = html코드
            -> 선택요소 내부에 자식으로 html코드를 넣는다
            _____________________________________

- [ JS에서 요소 선택 후 Text 넣기 ]
            선택요소.innerText = 텍스트
            -> 선택요소 내부에 내용으로 텍스트를 넣는다!


- [ JS의 코드 실행순서 ]
            1. 위에서 아래로
            2. 이퀄 오른쪽에서 왼쪽으로
            3. 소괄호안에서 바깥으로
            4. 함수 바깥부터 실행, 함수는 호출시 실행


- ++ 이나 --를 변수 앞이나 뒤에 붙일 수 있다
              변수 자신의 수를 증감할 경우엔 동일함!
              다른변수에 할당 시 의미가 달라진다!

              (1) ++을 뒤에 쓸 경우
              앞변수 = 뒷변수++
              해석: 뒷변수를 먼저 앞변수에 할당한 후
                  뒷변수를 1증가한다!

              (2) ++을 앞에 쓸 경우
              앞변수 = ++뒷변수
              해석: 뒷변수를 1증가 후 앞변수에 할당한다!



-   논리연산자 : true / false가 나오는
            경우에 이를 조합하여 결과를 리턴하는 연산자

            (1) 논리합(OR) -> || (바를 2개쓴다)
                - 여러조건 중 하나만 true 이면 true
            (2) 논리곱(AND) -> && (엔퍼센드를 2개쓴다)
                - 여러조건 중 모두 true 이면 true
            (3) 논리부정(NOT) -> ! (느낌표)
                - true 이면 false, false 이면 true



- [ let ] : 블록영역변수 (중괄호는 모두 블록임!)

        1. let으로 변수를 선언하면 전역과 지역을 별도로 관리하여
           같은 이름의 변수도 별개의 변수로 인식함
        
        2. let 변수는 선언 후 아래쪽에서 사용해야만 한다!
        ->>> 변수 호이스팅 금지!!!
        (비교 : var는 위에서 호출하고 아래에서 선언할 수 있다
        -> 변수의 호이스팅!) -> hoist (끌어올리다...라는 뜻!)

        3. 같은 영역에서 같은 이름의 변수를 중복선언 불가!
        (비교 : var는 중복선언시 덮어씀 - 재선언가능)

        _______________________________________________________


        [ const ] : 상수(constant) -> 변하지 않는값

        1. 선언과 동시에 할당해야함!

        2. 한번 할당한 값은 변경불가!

        3. 배열과 객체, 함수를 상수로 만드는 경우가 많다!
        -> 변경불가는 각 배열형, 객체형, 함수형
        -> 변경가능은 각 배열값, 객체값, 함수전달값

        4. 기타의 특징은 let과 동일함!(블록단위변수)



-  























